#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MC.ContactLessDining.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aspnet-MC.ContactLessDining-20200928111025")]
	public partial class ContactlessMenuDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMenuCard(MenuCard instance);
    partial void UpdateMenuCard(MenuCard instance);
    partial void DeleteMenuCard(MenuCard instance);
    partial void InsertMenuCategory(MenuCategory instance);
    partial void UpdateMenuCategory(MenuCategory instance);
    partial void DeleteMenuCategory(MenuCategory instance);
    partial void InsertShoppingCart(ShoppingCart instance);
    partial void UpdateShoppingCart(ShoppingCart instance);
    partial void DeleteShoppingCart(ShoppingCart instance);
    partial void InsertShoppingCartItem(ShoppingCartItem instance);
    partial void UpdateShoppingCartItem(ShoppingCartItem instance);
    partial void DeleteShoppingCartItem(ShoppingCartItem instance);
    #endregion
		
		public ContactlessMenuDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ContactlessMenuDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContactlessMenuDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContactlessMenuDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContactlessMenuDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MenuCard> MenuCards
		{
			get
			{
				return this.GetTable<MenuCard>();
			}
		}
		
		public System.Data.Linq.Table<MenuCategory> MenuCategories
		{
			get
			{
				return this.GetTable<MenuCategory>();
			}
		}
		
		public System.Data.Linq.Table<ShoppingCart> ShoppingCarts
		{
			get
			{
				return this.GetTable<ShoppingCart>();
			}
		}
		
		public System.Data.Linq.Table<ShoppingCartItem> ShoppingCartItems
		{
			get
			{
				return this.GetTable<ShoppingCartItem>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MenuCard")]
	public partial class MenuCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MenuCategoryId;
		
		private string _Name;
		
		private string _MenuDescription;
		
		private decimal _Price;
		
		private int _SortingOrder;
		
		private bool _IsActive;
		
		private string _ImageUrl;
		
		private int _Cabang;
		
		private bool _BestSellers;
		
		private bool _IsSteak;
		
		private EntitySet<ShoppingCartItem> _ShoppingCartItems;
		
		private EntityRef<MenuCategory> _MenuCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMenuCategoryIdChanging(int value);
    partial void OnMenuCategoryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMenuDescriptionChanging(string value);
    partial void OnMenuDescriptionChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnSortingOrderChanging(int value);
    partial void OnSortingOrderChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnImageUrlChanging(string value);
    partial void OnImageUrlChanged();
    partial void OnCabangChanging(int value);
    partial void OnCabangChanged();
    partial void OnBestSellersChanging(bool value);
    partial void OnBestSellersChanged();
    partial void OnIsSteakChanging(bool value);
    partial void OnIsSteakChanged();
    #endregion
		
		public MenuCard()
		{
			this._ShoppingCartItems = new EntitySet<ShoppingCartItem>(new Action<ShoppingCartItem>(this.attach_ShoppingCartItems), new Action<ShoppingCartItem>(this.detach_ShoppingCartItems));
			this._MenuCategory = default(EntityRef<MenuCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuCategoryId", DbType="Int NOT NULL")]
		public int MenuCategoryId
		{
			get
			{
				return this._MenuCategoryId;
			}
			set
			{
				if ((this._MenuCategoryId != value))
				{
					if (this._MenuCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMenuCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._MenuCategoryId = value;
					this.SendPropertyChanged("MenuCategoryId");
					this.OnMenuCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuDescription", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string MenuDescription
		{
			get
			{
				return this._MenuDescription;
			}
			set
			{
				if ((this._MenuDescription != value))
				{
					this.OnMenuDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MenuDescription = value;
					this.SendPropertyChanged("MenuDescription");
					this.OnMenuDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortingOrder", DbType="Int NOT NULL")]
		public int SortingOrder
		{
			get
			{
				return this._SortingOrder;
			}
			set
			{
				if ((this._SortingOrder != value))
				{
					this.OnSortingOrderChanging(value);
					this.SendPropertyChanging();
					this._SortingOrder = value;
					this.SendPropertyChanged("SortingOrder");
					this.OnSortingOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageUrl", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this.OnImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ImageUrl = value;
					this.SendPropertyChanged("ImageUrl");
					this.OnImageUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cabang", DbType="Int NOT NULL")]
		public int Cabang
		{
			get
			{
				return this._Cabang;
			}
			set
			{
				if ((this._Cabang != value))
				{
					this.OnCabangChanging(value);
					this.SendPropertyChanging();
					this._Cabang = value;
					this.SendPropertyChanged("Cabang");
					this.OnCabangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BestSellers", DbType="Bit NOT NULL")]
		public bool BestSellers
		{
			get
			{
				return this._BestSellers;
			}
			set
			{
				if ((this._BestSellers != value))
				{
					this.OnBestSellersChanging(value);
					this.SendPropertyChanging();
					this._BestSellers = value;
					this.SendPropertyChanged("BestSellers");
					this.OnBestSellersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSteak", DbType="Bit NOT NULL")]
		public bool IsSteak
		{
			get
			{
				return this._IsSteak;
			}
			set
			{
				if ((this._IsSteak != value))
				{
					this.OnIsSteakChanging(value);
					this.SendPropertyChanging();
					this._IsSteak = value;
					this.SendPropertyChanged("IsSteak");
					this.OnIsSteakChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MenuCard_ShoppingCartItem", Storage="_ShoppingCartItems", ThisKey="Id", OtherKey="MenuCardID")]
		public EntitySet<ShoppingCartItem> ShoppingCartItems
		{
			get
			{
				return this._ShoppingCartItems;
			}
			set
			{
				this._ShoppingCartItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MenuCategory_MenuCard", Storage="_MenuCategory", ThisKey="MenuCategoryId", OtherKey="Id", IsForeignKey=true)]
		public MenuCategory MenuCategory
		{
			get
			{
				return this._MenuCategory.Entity;
			}
			set
			{
				MenuCategory previousValue = this._MenuCategory.Entity;
				if (((previousValue != value) 
							|| (this._MenuCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MenuCategory.Entity = null;
						previousValue.MenuCards.Remove(this);
					}
					this._MenuCategory.Entity = value;
					if ((value != null))
					{
						value.MenuCards.Add(this);
						this._MenuCategoryId = value.Id;
					}
					else
					{
						this._MenuCategoryId = default(int);
					}
					this.SendPropertyChanged("MenuCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ShoppingCartItems(ShoppingCartItem entity)
		{
			this.SendPropertyChanging();
			entity.MenuCard = this;
		}
		
		private void detach_ShoppingCartItems(ShoppingCartItem entity)
		{
			this.SendPropertyChanging();
			entity.MenuCard = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MenuCategory")]
	public partial class MenuCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CategoryName;
		
		private int _SortingOrder;
		
		private bool _IsActive;
		
		private EntitySet<MenuCard> _MenuCards;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnSortingOrderChanging(int value);
    partial void OnSortingOrderChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public MenuCategory()
		{
			this._MenuCards = new EntitySet<MenuCard>(new Action<MenuCard>(this.attach_MenuCards), new Action<MenuCard>(this.detach_MenuCards));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortingOrder", DbType="Int NOT NULL")]
		public int SortingOrder
		{
			get
			{
				return this._SortingOrder;
			}
			set
			{
				if ((this._SortingOrder != value))
				{
					this.OnSortingOrderChanging(value);
					this.SendPropertyChanging();
					this._SortingOrder = value;
					this.SendPropertyChanged("SortingOrder");
					this.OnSortingOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MenuCategory_MenuCard", Storage="_MenuCards", ThisKey="Id", OtherKey="MenuCategoryId")]
		public EntitySet<MenuCard> MenuCards
		{
			get
			{
				return this._MenuCards;
			}
			set
			{
				this._MenuCards.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MenuCards(MenuCard entity)
		{
			this.SendPropertyChanging();
			entity.MenuCategory = this;
		}
		
		private void detach_MenuCards(MenuCard entity)
		{
			this.SendPropertyChanging();
			entity.MenuCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShoppingCart")]
	public partial class ShoppingCart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _UserID;
		
		private bool _IsCheckedOut;
		
		private bool _IsPaid;
		
		private bool _IsCompleted;
		
		private decimal _TotalPaid;
		
		private decimal _TotalBeforeTax;
		
		private decimal _Tax;
		
		private decimal _ServiceCharge;
		
		private System.DateTime _Created;
		
		private System.DateTime _Modified;
		
		private EntitySet<ShoppingCartItem> _ShoppingCartItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnIsCheckedOutChanging(bool value);
    partial void OnIsCheckedOutChanged();
    partial void OnIsPaidChanging(bool value);
    partial void OnIsPaidChanged();
    partial void OnIsCompletedChanging(bool value);
    partial void OnIsCompletedChanged();
    partial void OnTotalPaidChanging(decimal value);
    partial void OnTotalPaidChanged();
    partial void OnTotalBeforeTaxChanging(decimal value);
    partial void OnTotalBeforeTaxChanged();
    partial void OnTaxChanging(decimal value);
    partial void OnTaxChanged();
    partial void OnServiceChargeChanging(decimal value);
    partial void OnServiceChargeChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    #endregion
		
		public ShoppingCart()
		{
			this._ShoppingCartItems = new EntitySet<ShoppingCartItem>(new Action<ShoppingCartItem>(this.attach_ShoppingCartItems), new Action<ShoppingCartItem>(this.detach_ShoppingCartItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCheckedOut", DbType="Bit NOT NULL")]
		public bool IsCheckedOut
		{
			get
			{
				return this._IsCheckedOut;
			}
			set
			{
				if ((this._IsCheckedOut != value))
				{
					this.OnIsCheckedOutChanging(value);
					this.SendPropertyChanging();
					this._IsCheckedOut = value;
					this.SendPropertyChanged("IsCheckedOut");
					this.OnIsCheckedOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPaid", DbType="Bit NOT NULL")]
		public bool IsPaid
		{
			get
			{
				return this._IsPaid;
			}
			set
			{
				if ((this._IsPaid != value))
				{
					this.OnIsPaidChanging(value);
					this.SendPropertyChanging();
					this._IsPaid = value;
					this.SendPropertyChanged("IsPaid");
					this.OnIsPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCompleted", DbType="Bit NOT NULL")]
		public bool IsCompleted
		{
			get
			{
				return this._IsCompleted;
			}
			set
			{
				if ((this._IsCompleted != value))
				{
					this.OnIsCompletedChanging(value);
					this.SendPropertyChanging();
					this._IsCompleted = value;
					this.SendPropertyChanged("IsCompleted");
					this.OnIsCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPaid", DbType="Decimal(18,0) NOT NULL")]
		public decimal TotalPaid
		{
			get
			{
				return this._TotalPaid;
			}
			set
			{
				if ((this._TotalPaid != value))
				{
					this.OnTotalPaidChanging(value);
					this.SendPropertyChanging();
					this._TotalPaid = value;
					this.SendPropertyChanged("TotalPaid");
					this.OnTotalPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalBeforeTax", DbType="Decimal(18,0) NOT NULL")]
		public decimal TotalBeforeTax
		{
			get
			{
				return this._TotalBeforeTax;
			}
			set
			{
				if ((this._TotalBeforeTax != value))
				{
					this.OnTotalBeforeTaxChanging(value);
					this.SendPropertyChanging();
					this._TotalBeforeTax = value;
					this.SendPropertyChanged("TotalBeforeTax");
					this.OnTotalBeforeTaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tax", DbType="Decimal(18,0) NOT NULL")]
		public decimal Tax
		{
			get
			{
				return this._Tax;
			}
			set
			{
				if ((this._Tax != value))
				{
					this.OnTaxChanging(value);
					this.SendPropertyChanging();
					this._Tax = value;
					this.SendPropertyChanged("Tax");
					this.OnTaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceCharge", DbType="Decimal(18,0) NOT NULL")]
		public decimal ServiceCharge
		{
			get
			{
				return this._ServiceCharge;
			}
			set
			{
				if ((this._ServiceCharge != value))
				{
					this.OnServiceChargeChanging(value);
					this.SendPropertyChanging();
					this._ServiceCharge = value;
					this.SendPropertyChanged("ServiceCharge");
					this.OnServiceChargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShoppingCart_ShoppingCartItem", Storage="_ShoppingCartItems", ThisKey="ID", OtherKey="ShoppingCartID")]
		public EntitySet<ShoppingCartItem> ShoppingCartItems
		{
			get
			{
				return this._ShoppingCartItems;
			}
			set
			{
				this._ShoppingCartItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ShoppingCartItems(ShoppingCartItem entity)
		{
			this.SendPropertyChanging();
			entity.ShoppingCart = this;
		}
		
		private void detach_ShoppingCartItems(ShoppingCartItem entity)
		{
			this.SendPropertyChanging();
			entity.ShoppingCart = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShoppingCartItem")]
	public partial class ShoppingCartItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ShoppingCartID;
		
		private int _MenuCardID;
		
		private string _Doneness;
		
		private string _Sauce;
		
		private string _Potato;
		
		private bool _IsSteak;
		
		private int _Quantity;
		
		private System.DateTime _Created;
		
		private decimal _SubTotal;
		
		private bool _IsDeleted;
		
		private decimal _Discount;
		
		private System.DateTime _Modified;
		
		private decimal _ItemPrice;
		
		private EntityRef<MenuCard> _MenuCard;
		
		private EntityRef<ShoppingCart> _ShoppingCart;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnShoppingCartIDChanging(int value);
    partial void OnShoppingCartIDChanged();
    partial void OnMenuCardIDChanging(int value);
    partial void OnMenuCardIDChanged();
    partial void OnDonenessChanging(string value);
    partial void OnDonenessChanged();
    partial void OnSauceChanging(string value);
    partial void OnSauceChanged();
    partial void OnPotatoChanging(string value);
    partial void OnPotatoChanged();
    partial void OnIsSteakChanging(bool value);
    partial void OnIsSteakChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnSubTotalChanging(decimal value);
    partial void OnSubTotalChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnDiscountChanging(decimal value);
    partial void OnDiscountChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnItemPriceChanging(decimal value);
    partial void OnItemPriceChanged();
    #endregion
		
		public ShoppingCartItem()
		{
			this._MenuCard = default(EntityRef<MenuCard>);
			this._ShoppingCart = default(EntityRef<ShoppingCart>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShoppingCartID", DbType="Int NOT NULL")]
		public int ShoppingCartID
		{
			get
			{
				return this._ShoppingCartID;
			}
			set
			{
				if ((this._ShoppingCartID != value))
				{
					if (this._ShoppingCart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShoppingCartIDChanging(value);
					this.SendPropertyChanging();
					this._ShoppingCartID = value;
					this.SendPropertyChanged("ShoppingCartID");
					this.OnShoppingCartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuCardID", DbType="Int NOT NULL")]
		public int MenuCardID
		{
			get
			{
				return this._MenuCardID;
			}
			set
			{
				if ((this._MenuCardID != value))
				{
					if (this._MenuCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMenuCardIDChanging(value);
					this.SendPropertyChanging();
					this._MenuCardID = value;
					this.SendPropertyChanged("MenuCardID");
					this.OnMenuCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doneness", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Doneness
		{
			get
			{
				return this._Doneness;
			}
			set
			{
				if ((this._Doneness != value))
				{
					this.OnDonenessChanging(value);
					this.SendPropertyChanging();
					this._Doneness = value;
					this.SendPropertyChanged("Doneness");
					this.OnDonenessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sauce", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Sauce
		{
			get
			{
				return this._Sauce;
			}
			set
			{
				if ((this._Sauce != value))
				{
					this.OnSauceChanging(value);
					this.SendPropertyChanging();
					this._Sauce = value;
					this.SendPropertyChanged("Sauce");
					this.OnSauceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Potato", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Potato
		{
			get
			{
				return this._Potato;
			}
			set
			{
				if ((this._Potato != value))
				{
					this.OnPotatoChanging(value);
					this.SendPropertyChanging();
					this._Potato = value;
					this.SendPropertyChanged("Potato");
					this.OnPotatoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSteak", DbType="Bit NOT NULL")]
		public bool IsSteak
		{
			get
			{
				return this._IsSteak;
			}
			set
			{
				if ((this._IsSteak != value))
				{
					this.OnIsSteakChanging(value);
					this.SendPropertyChanging();
					this._IsSteak = value;
					this.SendPropertyChanged("IsSteak");
					this.OnIsSteakChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubTotal", DbType="Decimal(18,0) NOT NULL")]
		public decimal SubTotal
		{
			get
			{
				return this._SubTotal;
			}
			set
			{
				if ((this._SubTotal != value))
				{
					this.OnSubTotalChanging(value);
					this.SendPropertyChanging();
					this._SubTotal = value;
					this.SendPropertyChanged("SubTotal");
					this.OnSubTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Decimal(18,0) NOT NULL")]
		public decimal Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemPrice", DbType="Decimal(18,0) NOT NULL")]
		public decimal ItemPrice
		{
			get
			{
				return this._ItemPrice;
			}
			set
			{
				if ((this._ItemPrice != value))
				{
					this.OnItemPriceChanging(value);
					this.SendPropertyChanging();
					this._ItemPrice = value;
					this.SendPropertyChanged("ItemPrice");
					this.OnItemPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MenuCard_ShoppingCartItem", Storage="_MenuCard", ThisKey="MenuCardID", OtherKey="Id", IsForeignKey=true)]
		public MenuCard MenuCard
		{
			get
			{
				return this._MenuCard.Entity;
			}
			set
			{
				MenuCard previousValue = this._MenuCard.Entity;
				if (((previousValue != value) 
							|| (this._MenuCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MenuCard.Entity = null;
						previousValue.ShoppingCartItems.Remove(this);
					}
					this._MenuCard.Entity = value;
					if ((value != null))
					{
						value.ShoppingCartItems.Add(this);
						this._MenuCardID = value.Id;
					}
					else
					{
						this._MenuCardID = default(int);
					}
					this.SendPropertyChanged("MenuCard");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShoppingCart_ShoppingCartItem", Storage="_ShoppingCart", ThisKey="ShoppingCartID", OtherKey="ID", IsForeignKey=true)]
		public ShoppingCart ShoppingCart
		{
			get
			{
				return this._ShoppingCart.Entity;
			}
			set
			{
				ShoppingCart previousValue = this._ShoppingCart.Entity;
				if (((previousValue != value) 
							|| (this._ShoppingCart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShoppingCart.Entity = null;
						previousValue.ShoppingCartItems.Remove(this);
					}
					this._ShoppingCart.Entity = value;
					if ((value != null))
					{
						value.ShoppingCartItems.Add(this);
						this._ShoppingCartID = value.ID;
					}
					else
					{
						this._ShoppingCartID = default(int);
					}
					this.SendPropertyChanged("ShoppingCart");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
